{
	"version": 1,
	"collections": [
		{
			"id": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
			"name": "Profilic-server tests",
			"description": "# API endpoints for profilic-server.\n\nAPI Calls\n\n- GET /api/v1/profiles\n- GET /api/v1/profiles/:username\n- PUT /api/v1/profiles/filter/:fieldname\n- POST /api/v1/profiles/create\n- POST /api/v1/profiles/signup\n- POST /api/v1/profiles/link\n- PUT /api/v1/profiles/update\n- PUT /api/v1/profiles/updatelist\n- PUT /api/v1/profiles/login\n- POST /api/v1/profiles/auth\n- DELETE /api/v1/profiles/:id",
			"order": [
				"4c9b1064-cb52-eccf-bf96-fef8f6541190",
				"2e2fa704-07a9-9d52-f1f3-caffc6507446",
				"f813216c-5069-5554-0f39-13489d62c929",
				"8d15d74e-7b2f-5ba7-e402-9b24dc18835e",
				"d191844c-b931-d3a6-dd8c-baf5feb61084",
				"ee51d28d-1648-1ae0-9d62-967465189b97",
				"03eef5e4-3a48-b824-9140-9f321af61566",
				"9b617e4e-3107-6b05-2dee-679e8e69f9af",
				"da0b794b-e795-7571-dd9d-d07cca84a3f0",
				"24c122d9-20eb-dbc3-795a-ef48f883e480",
				"e254c0dd-e6ef-a200-e967-0426e96a534a",
				"37c3243f-6086-435d-8553-c55dd1f9348d",
				"518ad2da-6c7b-184d-db26-474c579a57fd",
				"b51312b0-1074-c513-de8e-fa31e5e5db9c"
			],
			"folders": [],
			"folders_order": [],
			"timestamp": 1510539258148,
			"synced": false,
			"remote_id": 0,
			"owner": 0,
			"sharedWithTeam": false,
			"subscribed": false,
			"remoteLink": "",
			"remoteLinkUpdatedAt": null,
			"public": false,
			"createdAt": 1510539258148,
			"updatedAt": "2017-11-13T23:37:44.180Z",
			"write": true,
			"published": false,
			"favorite": true,
			"permissions": {},
			"syncedPermissions": {},
			"requests": [
				{
					"id": "03eef5e4-3a48-b824-9140-9f321af61566",
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/x-www-form-urlencoded",
							"description": "",
							"enabled": true
						}
					],
					"url": "{{baseurl}}/login",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "PUT",
					"data": [
						{
							"key": "username",
							"value": "user3NOT",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "password",
							"value": "user3passNOT",
							"type": "text",
							"enabled": true,
							"description": ""
						}
					],
					"dataMode": "urlencoded",
					"version": 2,
					"tests": "pm.test(\"Error response\", function() {\r\n  pm.expect(pm.response.code).to.not.equal(200);\r\n});\r\n\r\nvar jsonData = JSON.parse(responseBody);\r\n\r\npm.test(\"No auth token in response\", function() {\r\n  pm.expect(jsonData).to.not.have.property(\"prf_authtoken\");\r\n});\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510609862189,
					"name": "PUT : Bad Login credentials",
					"description": "Attempt a bad login",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "24c122d9-20eb-dbc3-795a-ef48f883e480",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}/auth",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"Error response\", function() {\r\n  pm.expect(pm.response.code).to.not.equal(200);\r\n});\r\n",
					"currentHelper": "bearerAuth",
					"helperAttributes": {
						"token": "{{authtoken}}AndExtraText"
					},
					"time": 1510616610537,
					"name": "POST : Corrupted authentication",
					"description": "Attempt to violate auth by sending a corrupted token",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "2e2fa704-07a9-9d52-f1f3-caffc6507446",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}/create",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"Error response\", function() {\r\n  pm.expect(pm.response.code).to.not.equal(200);\r\n});",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510582279259,
					"name": "POST : Create Empty",
					"description": "Create request with no payload",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "37c3243f-6086-435d-8553-c55dd1f9348d",
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/x-www-form-urlencoded",
							"description": "",
							"enabled": true
						}
					],
					"url": "{{baseurl}}/update",
					"queryParams": [],
					"preRequestScript": "var testId1 = pm.environment.get(\"testId1\");",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "PUT",
					"data": [
						{
							"key": "username",
							"value": "user1",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "_id",
							"value": "{{testId1}}",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "bio",
							"value": "This is my new description",
							"description": "",
							"type": "text",
							"enabled": true
						},
						{
							"key": "avatarSrc",
							"value": "fake-image-source",
							"description": "",
							"type": "text",
							"enabled": true
						}
					],
					"dataMode": "urlencoded",
					"version": 2,
					"tests": "pm.test(\"OK response\", function() {\r\n  pm.expect(pm.response.code).to.equal(200);\r\n});\r\n\r\nvar jsonData = JSON.parse(responseBody);\r\nvar profile = jsonData.profileList[0];\r\n\r\npm.test(\"Must all profile attributes except password\", function() {\r\n  pm.expect(profile).to.have.property(\"_id\");\r\n  pm.expect(profile).to.have.property(\"username\");\r\n  pm.expect(profile).to.have.property(\"avatarSrc\");\r\n  pm.expect(profile).to.not.have.property(\"password\");\r\n});\r\n\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510615065624,
					"name": "PUT : Update",
					"description": "Attempt login with right credentials",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "4c9b1064-cb52-eccf-bf96-fef8f6541190",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"response is ok\", function () {\r\n    pm.response.to.have.status(200);\r\n});\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510578417981,
					"name": "GET Profiles",
					"description": "Get all the profiles in the database",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "518ad2da-6c7b-184d-db26-474c579a57fd",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}/{{testId1}}",
					"queryParams": [],
					"preRequestScript": "testId1 = pm.environment.get(\"testId1\");",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "DELETE",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"response is ok\", function () {\r\n    pm.response.to.have.status(200);\r\n});",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510617727913,
					"name": "DELETE Profile - TestUser1",
					"description": "Deletes a profile with the given id.",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "8d15d74e-7b2f-5ba7-e402-9b24dc18835e",
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/x-www-form-urlencoded",
							"description": "",
							"enabled": true
						}
					],
					"url": "{{baseurl}}/create",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [
						{
							"key": "username",
							"value": "user1",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "bio",
							"value": "I am a tester! This is a test. I even have strange characters:  διακριτικός",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "following[]",
							"value": "red, yellow, orange",
							"type": "text",
							"enabled": true,
							"description": ""
						}
					],
					"dataMode": "urlencoded",
					"version": 2,
					"tests": "pm.test(\"OK response\", function() {\r\n  pm.expect(pm.response.code).to.equal(200);\r\n});\r\n\r\nvar jsonData = JSON.parse(responseBody);\r\npm.environment.set(\"testId1\", jsonData.profileList[0]._id);\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510612733627,
					"name": "POST : Create Profile (Raw Create)",
					"description": "Create a raw profile directly on the server without going through any signup validation. Useful for test raw database connectivity and confirm the correct database collection is available.",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": [
						{
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
							},
							"time": 106,
							"headers": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "236",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Mon, 13 Nov 2017 16:20:23 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ec-ecTRn2WXeuTghkzT0EvHKHNDQ+o\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "X-Powered-By",
									"value": "Express",
									"name": "X-Powered-By",
									"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"profileList\":[{\"username\":\"tester\",\"bio\":\"I am a tester! This is a test. I even have strange characters:  διακριτικός\",\"following\":[\"red, yellow, orange\"],\"_id\":\"5a09c6472c84ca2ffc76a6e9\"}],\"insertedCount\":1,\"message\":\"OK\"}",
							"language": "json",
							"previewType": "text",
							"searchResultScrolledTo": -1,
							"forceNoPretty": false,
							"write": true,
							"empty": false,
							"failed": false,
							"code": 200,
							"responseSize": {
								"body": 236,
								"header": 213,
								"total": 449
							},
							"mimeType": "text",
							"fileName": "response.json",
							"dataURI": "data:application/json;base64, eyJwcm9maWxlTGlzdCI6W3sidXNlcm5hbWUiOiJ0ZXN0ZXIiLCJiaW8iOiJJIGFtIGEgdGVzdGVyISBUaGlzIGlzIGEgdGVzdC4gSSBldmVuIGhhdmUgc3RyYW5nZSBjaGFyYWN0ZXJzOiAgzrTOuc6xzrrPgc65z4TOuc66z4zPgiIsImZvbGxvd2luZyI6WyJyZWQsIHllbGxvdywgb3JhbmdlIl0sIl9pZCI6IjVhMDljNjQ3MmM4NGNhMmZmYzc2YTZlOSJ9XSwiaW5zZXJ0ZWRDb3VudCI6MSwibWVzc2FnZSI6Ik9LIn0=",
							"name": "POST : Create Profile (Raw Create)",
							"id": "7d326f0a-7c3f-b379-51fc-424173570eeb",
							"request": {
								"url": "{{baseurl}}/create",
								"pathVariables": {},
								"pathVariableData": [],
								"queryParams": [],
								"headerData": [
									{
										"key": "Content-Type",
										"type": "text",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"description": "",
										"enabled": true
									}
								],
								"headers": "Content-Type: application/x-www-form-urlencoded\n",
								"data": [
									{
										"key": "username",
										"value": "tester",
										"type": "text",
										"enabled": true,
										"description": ""
									},
									{
										"key": "bio",
										"value": "I am a tester! This is a test. I even have strange characters:  διακριτικός",
										"type": "text",
										"enabled": true,
										"description": ""
									},
									{
										"key": "following[]",
										"value": "red, yellow, orange",
										"type": "text",
										"enabled": true,
										"description": ""
									}
								],
								"method": "POST",
								"dataMode": "urlencoded"
							}
						}
					]
				},
				{
					"id": "9b617e4e-3107-6b05-2dee-679e8e69f9af",
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/x-www-form-urlencoded",
							"description": "",
							"enabled": true
						}
					],
					"url": "{{baseurl}}/login",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "PUT",
					"data": [
						{
							"key": "username",
							"value": "user3",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "password",
							"value": "user3pass",
							"type": "text",
							"enabled": true,
							"description": ""
						}
					],
					"dataMode": "urlencoded",
					"version": 2,
					"tests": "pm.test(\"OK response\", function() {\r\n  pm.expect(pm.response.code).to.equal(200);\r\n});\r\n\r\nvar jsonData = JSON.parse(responseBody);\r\n\r\npm.test(\"Must have auth token in response\", function() {\r\n  pm.expect(jsonData).to.have.property(\"prf_authtoken\");\r\n});\r\n\r\npm.environment.set(\"authtoken\", jsonData.prf_authtoken);\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510612213232,
					"name": "PUT : Good Login credentials",
					"description": "Attempt login with right credentials",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "b51312b0-1074-c513-de8e-fa31e5e5db9c",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}/{{testId2}}",
					"queryParams": [],
					"preRequestScript": "testId2 = pm.environment.get(\"testId2\");",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "DELETE",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"response is ok\", function () {\r\n    pm.response.to.have.status(200);\r\n});",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510617758685,
					"name": "DELETE Profile - TestUser2",
					"description": "Deletes a profile with the given id.",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "d191844c-b931-d3a6-dd8c-baf5feb61084",
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/x-www-form-urlencoded",
							"description": "",
							"enabled": true
						}
					],
					"url": "{{baseurl}}/signup",
					"queryParams": [],
					"preRequestScript": "",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [
						{
							"key": "username",
							"value": "user2",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "email",
							"value": "foo@bar.com",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "bio",
							"value": "I am a tester! This is a test.",
							"type": "text",
							"enabled": true,
							"description": ""
						}
					],
					"dataMode": "urlencoded",
					"version": 2,
					"tests": "pm.test(\"Error response\", function() {\r\n  pm.expect(pm.response.code).to.not.equal(200);\r\n});\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510607045605,
					"name": "POST : Bad Signup (no pwd)",
					"description": "Creation of a user profile with a unique username, but no password",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "da0b794b-e795-7571-dd9d-d07cca84a3f0",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}/auth",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"Error response\", function() {\r\n  pm.expect(pm.response.code).to.not.equal(200);\r\n});\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510612469308,
					"name": "POST : Bad authenticate (no token)",
					"description": "Authenticate to the server by sending the auth token",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "e254c0dd-e6ef-a200-e967-0426e96a534a",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}/auth",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"OK response\", function() {\r\n  pm.expect(pm.response.code).to.equal(200);\r\n});\r\n",
					"currentHelper": "bearerAuth",
					"helperAttributes": {
						"token": "{{authtoken}}"
					},
					"time": 1510612609718,
					"name": "POST : Correct authentication copy",
					"description": "Authenticate to the server by sending the auth token",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": [],
					"isFromCollection": true,
					"collectionRequestId": "24c122d9-20eb-dbc3-795a-ef48f883e480"
				},
				{
					"id": "ee51d28d-1648-1ae0-9d62-967465189b97",
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/x-www-form-urlencoded",
							"description": "",
							"enabled": true
						}
					],
					"url": "{{baseurl}}/signup",
					"queryParams": [],
					"preRequestScript": "",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [
						{
							"key": "username",
							"value": "user3",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "password",
							"value": "user3pass",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "email",
							"value": "foo@bar.com",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "bio",
							"value": "I am a tester! This is a test. I even have strange characters:  διακριτικός",
							"type": "text",
							"enabled": true,
							"description": ""
						},
						{
							"key": "keywords[]",
							"value": "red, yellow, orange",
							"type": "text",
							"enabled": true,
							"description": ""
						}
					],
					"dataMode": "urlencoded",
					"version": 2,
					"tests": "pm.test(\"Status code is 200\", function() {\r\n  pm.expect(pm.response.code).to.equal(200);\r\n});\r\n\r\nvar jsonData = JSON.parse(responseBody);\r\npm.environment.set(\"testId2\", jsonData.profileList[0]._id);",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510606609369,
					"name": "POST : Good Signup",
					"description": "Creation of a user profile with a unique username, and a password.",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				},
				{
					"id": "f813216c-5069-5554-0f39-13489d62c929",
					"headers": "",
					"headerData": [],
					"url": "{{baseurl}}/signup",
					"queryParams": [],
					"preRequestScript": null,
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "pm.test(\"Error response\", function() {\r\n  pm.expect(pm.response.code).to.not.equal(200);\r\n});",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1510582288876,
					"name": "POST : Signup Empty",
					"description": "Signup request with no payload",
					"collectionId": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
					"responses": []
				}
			]
		}
	],
	"environments": [
		{
			"id": "01d2ac0f-7436-0022-3c9e-0da48213680d",
			"name": "dev",
			"values": [
				{
					"enabled": true,
					"key": "baseurl",
					"value": "http://localhost:3008/api/v1/profiles",
					"type": "text"
				}
			],
			"team": null,
			"timestamp": 1510624308361
		}
	],
	"headerPresets": [],
	"globals": []
}