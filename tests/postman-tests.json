{
	"info": {
		"name": "Profilic-server tests",
		"_postman_id": "1d2b0602-e4ab-0371-42e5-85661a4d29d1",
		"description": "# API endpoints for profilic-server.\n\nAPI Calls\n\n- GET /api/v1/profiles\n- GET /api/v1/profiles/:username\n- PUT /api/v1/profiles/filter/:fieldname\n- POST /api/v1/profiles/signup\n- POST /api/v1/profiles/link\n- PUT /api/v1/profiles/update\n- PUT /api/v1/profiles/update/micro\n- PUT /api/v1/profiles/updatelist\n- PUT /api/v1/profiles/login\n- POST /api/v1/profiles/auth\n- DELETE /api/v1/profiles/:id",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET Profiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}",
					"host": [
						"{{baseurl}}"
					]
				},
				"description": "Get all the profiles in the database"
			},
			"response": []
		},
		{
			"name": "POST : Signup Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Error response\", function() {\r",
							"  pm.expect(pm.response.code).to.not.equal(200);\r",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"signup"
					]
				},
				"description": "Signup request with no payload"
			},
			"response": []
		},
		{
			"name": "POST : Bad Signup (no pwd)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Error response\", function() {\r",
							"  pm.expect(pm.response.code).to.not.equal(200);\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user2",
							"type": "text"
						},
						{
							"key": "email",
							"value": "foo@bar.com",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "I am a tester! This is a test.",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"signup"
					]
				},
				"description": "Creation of a user profile with a unique username, but no password"
			},
			"response": []
		},
		{
			"name": "POST : Good Signup 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    \"title\": \"User Profile Schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"joinedOn\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"date-time\"\r",
							"        },\r",
							"        \"modifiedOn\" : {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"date-time\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"joinedOn\",\"modifiedOn\"]\r",
							"}\r",
							"        \r",
							"pm.test(\"Status code is 200\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var profile = jsonData.profileList[0];\r",
							"pm.environment.set(\"testId1\", profile._id);\r",
							"\r",
							"pm.test(\"Creation timestamps\", function() {\r",
							"  pm.expect(tv4.validate(profile, schema)).to.be.true;\r",
							"});\r",
							"pm.environment.set(\"tsModified1\", profile.modifiedOn);\r",
							"\r",
							"pm.test(\"No password returned\", function() {\r",
							"    pm.expect(profile).to.not.have.property(\"password\");\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user1",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user1pass",
							"type": "text"
						},
						{
							"key": "email",
							"value": "blahblah@blah.com",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "I am the very first profile. So there.",
							"type": "text"
						},
						{
							"key": "keywords[]",
							"value": "blue",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"signup"
					]
				},
				"description": "Creation of a user profile with a unique username, and a password."
			},
			"response": []
		},
		{
			"name": "POST : Good Signup 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    \"title\": \"User Profile Schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"joinedOn\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"date-time\"\r",
							"        },\r",
							"        \"modifiedOn\" : {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"date-time\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"joinedOn\",\"modifiedOn\"]\r",
							"}\r",
							"        \r",
							"pm.test(\"Status code is 200\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var profile = jsonData.profileList[0];\r",
							"pm.environment.set(\"testId2\", profile._id);\r",
							"\r",
							"pm.test(\"Creation timestamps\", function() {\r",
							"  pm.expect(tv4.validate(profile, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"No password returned\", function() {\r",
							"  pm.expect(profile).to.not.have.property(\"password\");\r",
							"});\r",
							"\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user2",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user2pass",
							"type": "text"
						},
						{
							"key": "email",
							"value": "foo@bar.com",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "I am a tester! This is a test. I even have strange characters:  διακριτικός",
							"type": "text"
						},
						{
							"key": "keywords[]",
							"value": "red, yellow, orange",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"signup"
					]
				},
				"description": "Creation of a user profile with a unique username, and a password."
			},
			"response": []
		},
		{
			"name": "POST : Link profiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.expect(jsonData.profileList.length).to.equal(2);\r",
							"pm.expect(jsonData.profileList[0].username).to.equal(\"user2\");\r",
							"pm.expect(jsonData.profileList[1].username).to.equal(\"user1\");\r",
							"pm.expect(jsonData.profileList[1].followers[0]).to.equal(\"user2\");\r",
							"pm.expect(jsonData.profileList[0].following[0]).to.equal(\"user1\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.get(\"testId1\");",
							"pm.environment.get(\"testId2\");"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "linkfrom[_id]",
							"value": "{{testId2}}",
							"type": "text"
						},
						{
							"key": "linkfrom[username]",
							"value": "user2",
							"type": "text"
						},
						{
							"key": "linkto[_id]",
							"value": "{{testId1}}",
							"type": "text"
						},
						{
							"key": "linkto[username]",
							"value": "user1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/link",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"link"
					]
				},
				"description": "Create a link from one profile to another"
			},
			"response": []
		},
		{
			"name": "DELETE: Unlink profiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.expect(jsonData.profileList.length).to.equal(2);\r",
							"pm.expect(jsonData.profileList[0].username).to.equal(\"user2\");\r",
							"pm.expect(jsonData.profileList[1].username).to.equal(\"user1\");\r",
							"pm.expect(jsonData.profileList[1].followers.length).to.equal(0);\r",
							"pm.expect(jsonData.profileList[0].following.length).to.equal(0);"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.get(\"testId1\");",
							"pm.environment.get(\"testId2\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "linkfrom[_id]",
							"value": "{{testId2}}",
							"type": "text"
						},
						{
							"key": "linkfrom[username]",
							"value": "user2",
							"type": "text"
						},
						{
							"key": "linkfrom[following][]",
							"value": "user1",
							"type": "text"
						},
						{
							"key": "linkto[_id]",
							"value": "{{testId1}}",
							"type": "text"
						},
						{
							"key": "linkto[username]",
							"value": "user1",
							"type": "text"
						},
						{
							"key": "linkto[followers][]",
							"value": "user2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/link",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"link"
					]
				},
				"description": "Remove the link from one profile to another"
			},
			"response": []
		},
		{
			"name": "PUT : Bad Login credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Error response\", function() {\r",
							"  pm.expect(pm.response.code).to.not.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"No auth token in response\", function() {\r",
							"  pm.expect(jsonData).to.not.have.property(\"prf_authtoken\");\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user3NOT",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user3passNOT",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/login",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Attempt a bad login"
			},
			"response": []
		},
		{
			"name": "PUT : Good Login credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"OK response\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Must have auth token in response\", function() {\r",
							"  pm.expect(jsonData).to.have.property(\"prf_authtoken\");\r",
							"});\r",
							"\r",
							"pm.environment.set(\"authtoken\", jsonData.prf_authtoken);\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user2",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user2pass",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/login",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Attempt login with right credentials"
			},
			"response": []
		},
		{
			"name": "POST : Bad authenticate (no token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Error response\", function() {\r",
							"  pm.expect(pm.response.code).to.not.equal(200);\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}/auth",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Authenticate to the server by sending the auth token"
			},
			"response": []
		},
		{
			"name": "POST : Corrupted authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Error response\", function() {\r",
							"  pm.expect(pm.response.code).to.not.equal(200);\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authtoken}}AndExtraText",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}/auth",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Attempt to violate auth by sending a corrupted token"
			},
			"response": []
		},
		{
			"name": "POST : Correct authentication copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"OK response\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authtoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}/auth",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Authenticate to the server by sending the auth token"
			},
			"response": []
		},
		{
			"name": "PUT : Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"OK response\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var profile = jsonData.profileList[0];\r",
							"\r",
							"//var newTimestamp = new Date(profile.modifiedOn);\r",
							"// var oldTimestamp = new Date(tsModified1);\r",
							"\r",
							"pm.test(\"Must all profile attributes except password\", function() {\r",
							"  pm.expect(profile).to.have.property(\"_id\");\r",
							"  pm.expect(profile).to.have.property(\"username\");\r",
							"  pm.expect(profile).to.have.property(\"avatarSrc\");\r",
							"  pm.expect(profile).to.not.have.property(\"password\");\r",
							"//  pm.expect(newTimestamp).to.be.above(oldTimestamp); //not working at the mo.\r",
							"});\r",
							"\r",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var testId1 = pm.environment.get(\"testId1\");",
							"var tsModified1 = pm.environment.get(\"tsModified1\");",
							"console.log(tsModified1);"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user1",
							"type": "text"
						},
						{
							"key": "_id",
							"value": "{{testId1}}",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "This is my new description",
							"type": "text"
						},
						{
							"key": "avatarSrc",
							"value": "fake-image-source",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/update",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"update"
					]
				},
				"description": "Attempt a basic update"
			},
			"response": []
		},
		{
			"name": "PUT : Update Micro",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"OK response\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var profile = jsonData.profileList[0];\r",
							"\r",
							"pm.test(\"Must have only the profile attributes being updated, with password excluded\", function() {\r",
							"  pm.expect(profile).to.not.have.property(\"password\");\r",
							"  pm.expect(profile).to.have.property(\"bio\");\r",
							"  pm.expect(profile).to.have.property(\"following\");\r",
							"});\r",
							"\r",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var testId1 = pm.environment.get(\"testId1\");"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "_id",
							"value": "{{testId1}}",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "This is an even newer description...",
							"type": "text"
						},
						{
							"key": "following[]",
							"value": "susie",
							"type": "text"
						},
						{
							"key": "password",
							"value": "resetting",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/update/micro",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"update",
						"micro"
					]
				},
				"description": "Attempt a micro update"
			},
			"response": []
		},
		{
			"name": "Get Profile by Username - Verify Profile updates",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var profile = jsonData.profile;\r",
							"\r",
							"pm.test(\"Must reflect cumulative updates\", function() {\r",
							"  pm.expect(profile.bio).to.eql(\"This is an even newer description...\");\r",
							"  pm.expect(profile.avatarSrc).to.eql(\"fake-image-source\");\r",
							"  pm.expect(profile.following.length).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.globals.unset(\"variable_key\");"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/user1",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"user1"
					]
				},
				"description": "Get all the profiles in the database"
			},
			"response": []
		},
		{
			"name": "POST : Signup - Duplicate username",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is not 200\", function() {\r",
							"  pm.expect(pm.response.code).to.not.equal(200);\r",
							"});\r",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user2",
							"type": "text"
						},
						{
							"key": "password",
							"value": "newpassword",
							"type": "text"
						},
						{
							"key": "email",
							"value": "newemail@mail.com",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "Testing 123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"signup"
					]
				},
				"description": "Creation of a user profile with non-unique credentials"
			},
			"response": []
		},
		{
			"name": "POST : 3rd Signup - Get Latest Limit 2 Test Prep",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {\r",
							"    \"title\": \"User Profile Schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"joinedOn\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"date-time\"\r",
							"        },\r",
							"        \"modifiedOn\" : {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"date-time\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"joinedOn\",\"modifiedOn\"]\r",
							"}\r",
							"        \r",
							"pm.test(\"Status code is 200\", function() {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var profile = jsonData.profileList[0];\r",
							"pm.environment.set(\"testId3\", profile._id);\r",
							"\r",
							"pm.test(\"Creation timestamp\", function() {\r",
							"  pm.expect(tv4.validate(profile, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"No password returned\", function() {\r",
							"  pm.expect(profile).to.not.have.property(\"password\");\r",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user3",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user3pass",
							"type": "text"
						},
						{
							"key": "email",
							"value": "user3@example.com",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "I am the third user.",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"signup"
					]
				},
				"description": "Creation of a user profile"
			},
			"response": []
		},
		{
			"name": "Get Latest limit 2 - part 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var profiles = jsonData.profileList;\r",
							"\r",
							"pm.test(\"Only 2 profiles returned\", function() {\r",
							"  pm.expect(profiles.length).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"expect first item to be that last inserted\", function() {\r",
							"  pm.expect(profiles[0].username).to.eql('user3');\r",
							"});\r",
							"\r",
							"pm.test(\"expect second item to be that next recently inserted\", function() {\r",
							"  pm.expect(profiles[1].username).to.eql('user2');\r",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}/latest/2",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"latest",
						"2"
					]
				},
				"description": "Get the latest 2 profiles in the database."
			},
			"response": []
		},
		{
			"name": "DELETE Profile - TestUser1",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"testId1 = pm.environment.get(\"testId1\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}/{{testId1}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"{{testId1}}"
					]
				},
				"description": "Deletes a profile with the given id."
			},
			"response": []
		},
		{
			"name": "DELETE Profile - TestUser2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"testId2 = pm.environment.get(\"testId2\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}/{{testId2}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"{{testId2}}"
					]
				},
				"description": "Deletes a profile with the given id."
			},
			"response": []
		},
		{
			"name": "DELETE Profile - TestUser3",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"testId3 = pm.environment.get(\"testId3\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{baseurl}}/{{testId3}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"{{testId3}}"
					]
				},
				"description": "Deletes a profile with the given id."
			},
			"response": []
		}
	]
}